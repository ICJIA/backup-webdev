#!/bin/bash
# reporting.sh - Reporting functions for backup-webdev
# This file contains reporting-related functions used across scripts

# Source the shared utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/utils.sh"

# Create a backup report
create_backup_report() {
    local backup_dir=$1
    local successful=$2
    local failed=$3
    local src_size=$4
    local backup_size=$5
    local start_time=$6
    local end_time=$7
    local backup_type=${8:-"full"}
    local report_file=${9:-"$backup_dir/backup_report.html"}
    
    # Calculate duration
    local duration=$(( $(date -d "$end_time" +%s) - $(date -d "$start_time" +%s) ))
    local duration_str=$(printf "%02d:%02d:%02d" $(($duration/3600)) $(($duration%3600/60)) $(($duration%60)))
    
    # Create HTML report
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebDev Backup Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        h2 {
            color: #2980b9;
        }
        .success {
            color: #27ae60;
        }
        .failure {
            color: #e74c3c;
        }
        .summary {
            background: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #3498db;
            color: white;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>WebDev Backup Report</h1>
        
        <div class="summary">
            <h2>Backup Summary</h2>
            <p><strong>Date:</strong> $end_time</p>
            <p><strong>Backup Type:</strong> ${backup_type^}</p>
            <p><strong>Duration:</strong> $duration_str</p>
            <p><strong>Projects Processed:</strong> $(($successful + $failed))</p>
            <p><strong>Successfully Backed Up:</strong> <span class="success">$successful</span></p>
            <p><strong>Failed Backups:</strong> <span class="failure">$failed</span></p>
            <p><strong>Total Source Size:</strong> $(format_size "$src_size")</p>
            <p><strong>Total Backup Size:</strong> $(format_size "$backup_size")</p>
EOF

    # Add compression ratio if we have valid sizes
    if [ "$backup_size" -gt 0 ] && [ "$src_size" -gt 0 ]; then
        local ratio=$(awk "BEGIN {printf \"%.1f\", ($src_size/$backup_size)}")
        echo "<p><strong>Overall Compression Ratio:</strong> ${ratio}x</p>" >> "$report_file"
    fi

    # Add backup location
    echo "<p><strong>Backup Location:</strong> $backup_dir</p>" >> "$report_file"
    echo "</div>" >> "$report_file"
    
    # Add project details if stats file exists
    local stats_file="$backup_dir/backup_stats.txt"
    if [ -f "$stats_file" ]; then
        echo "<h2>Project Details</h2>" >> "$report_file"
        echo "<table>" >> "$report_file"
        echo "<tr><th>Project</th><th>Source Size</th><th>Backup Size</th><th>Ratio</th></tr>" >> "$report_file"
        
        while IFS=, read -r project src_size archive_size ratio; do
            echo "<tr>" >> "$report_file"
            echo "<td>$project</td>" >> "$report_file"
            echo "<td>$(format_size "$src_size")</td>" >> "$report_file"
            echo "<td>$(format_size "$archive_size")</td>" >> "$report_file"
            echo "<td>${ratio}x</td>" >> "$report_file"
            echo "</tr>" >> "$report_file"
        done < "$stats_file"
        
        echo "</table>" >> "$report_file"
    fi
    
    # Close HTML
    cat >> "$report_file" << EOF
        <footer>
            <p>Generated by WebDev Backup Tool on $(date)</p>
        </footer>
    </div>
</body>
</html>
EOF

    echo "$report_file"
}

# Create email report
create_email_report() {
    local backup_dir=$1
    local successful=$2
    local failed=$3
    local src_size=$4
    local backup_size=$5
    local start_time=$6
    local end_time=$7
    local backup_type=${8:-"full"}
    
    # Calculate duration
    local duration=$(( $(date -d "$end_time" +%s) - $(date -d "$start_time" +%s) ))
    local duration_str=$(printf "%02d:%02d:%02d" $(($duration/3600)) $(($duration%3600/60)) $(($duration%60)))
    
    # Create email content
    local email_content="WebDev Backup Report - $(date '+%Y-%m-%d')\n"
    email_content+="\n===== Backup Summary =====\n"
    email_content+="Date: $end_time\n"
    email_content+="Backup Type: ${backup_type^}\n"
    email_content+="Duration: $duration_str\n"
    email_content+="Projects Processed: $(($successful + $failed))\n"
    email_content+="Successfully Backed Up: $successful\n"
    email_content+="Failed Backups: $failed\n"
    email_content+="Total Source Size: $(format_size "$src_size")\n"
    email_content+="Total Backup Size: $(format_size "$backup_size")\n"
    
    # Add compression ratio if we have valid sizes
    if [ "$backup_size" -gt 0 ] && [ "$src_size" -gt 0 ]; then
        local ratio=$(awk "BEGIN {printf \"%.1f\", ($src_size/$backup_size)}")
        email_content+="Overall Compression Ratio: ${ratio}x\n"
    fi
    
    # Add backup location
    email_content+="Backup Location: $backup_dir\n"
    
    # Add status indication
    if [ "$failed" -eq 0 ]; then
        email_content+="\nStatus: SUCCESS - All projects backed up successfully.\n"
    else
        email_content+="\nStatus: WARNING - $failed projects failed to back up properly.\n"
        email_content+="Please check the detailed report for more information.\n"
    fi
    
    echo -e "$email_content"
}

# Generate a backup history visualization
generate_history_chart() {
    local history_log=$1
    local output_file=$2
    local max_entries=${3:-10}
    
    # Ensure gnuplot is installed
    if ! command -v gnuplot >/dev/null 2>&1; then
        echo "Cannot create visualization - gnuplot not installed"
        return 1
    fi
    
    # Create a temporary data file
    local temp_data=$(mktemp)
    
    # Extract dates and sizes
    grep "Total Size:" "$history_log" | head -n "$max_entries" | \
        sed -E 's/.*Total Size: ([0-9.]+) ([A-Z]+).*/\1 \2/' | \
        awk '{
            multiplier = 1;
            if ($2 == "KB") multiplier = 1024;
            else if ($2 == "MB") multiplier = 1024*1024;
            else if ($2 == "GB") multiplier = 1024*1024*1024;
            else if ($2 == "TB") multiplier = 1024*1024*1024*1024;
            print NR, $1 * multiplier;
        }' > "$temp_data"
    
    # Create a gnuplot script
    local gnuplot_script=$(mktemp)
    
    cat > "$gnuplot_script" << EOF
set terminal png enhanced size 800,500
set output "$output_file"
set title "Backup Size History"
set xlabel "Backup Number (recent to oldest)"
set ylabel "Size (bytes)"
set grid
set style fill solid 0.5
set boxwidth 0.8
plot "$temp_data" using 1:2 with boxes title "Backup Size" linecolor rgb "#3498db"
EOF
    
    # Run gnuplot
    gnuplot "$gnuplot_script"
    
    # Clean up temporary files
    rm "$temp_data" "$gnuplot_script"
    
    if [ -f "$output_file" ]; then
        echo "$output_file"
        return 0
    else
        echo "Failed to generate chart"
        return 1
    fi
}

# Generate space forecast
generate_space_forecast() {
    local history_log=$1
    local forecast_file=$2
    local forecast_days=${3:-30}
    
    # Ensure sufficient history exists (at least 3 entries)
    local entry_count=$(grep -c "BACKUP:" "$history_log")
    if [ "$entry_count" -lt 3 ]; then
        echo "Insufficient backup history for forecasting (need at least 3 entries)"
        return 1
    fi
    
    # Create a temporary data file
    local temp_data=$(mktemp)
    
    # Extract dates and sizes
    grep -A2 "BACKUP:" "$history_log" | grep "Total Size:" | \
        sed -E 's/.*Total Size: ([0-9.]+) ([A-Z]+).*/\1 \2/' | \
        awk '{
            multiplier = 1;
            if ($2 == "KB") multiplier = 1024;
            else if ($2 == "MB") multiplier = 1024*1024;
            else if ($2 == "GB") multiplier = 1024*1024*1024;
            else if ($2 == "TB") multiplier = 1024*1024*1024*1024;
            print NR, $1 * multiplier;
        }' > "$temp_data"
    
    # Calculate trend line using awk
    local trend_data=$(mktemp)
    awk '{
        sum_x += $1;
        sum_y += $2;
        sum_xy += $1*$2;
        sum_xx += $1*$1;
        n++;
    }
    END {
        a = (n*sum_xy - sum_x*sum_y) / (n*sum_xx - sum_x*sum_x);
        b = (sum_y - a*sum_x) / n;
        
        # Output coefficients for forecast
        print b, a;
        
        # Generate forecast points
        for (i=1; i<=n+'$forecast_days'; i++) {
            y = a*i + b;
            if (y < 0) y = 0;  # Prevent negative forecasts
            print i, y;
        }
    }' "$temp_data" > "$trend_data"
    
    # Get coefficients for report
    read b a < "$trend_data"
    
    # Create a gnuplot script
    local gnuplot_script=$(mktemp)
    
    cat > "$gnuplot_script" << EOF
set terminal png enhanced size 800,500
set output "$forecast_file"
set title "Backup Size Forecast ($forecast_days Days)"
set xlabel "Backup Number"
set ylabel "Size (bytes)"
set grid
set key outside right top
set style line 1 lc rgb "#3498db" lt 1 lw 2 pt 7 ps 1.5
set style line 2 lc rgb "#e74c3c" lt 1 lw 2 pt 0
set style line 3 lc rgb "#2ecc71" lt 2 lw 1 pt 0

# Plot data points and forecast line
plot "$temp_data" using 1:2 with points ls 1 title "Actual Backup Sizes", \
     "$trend_data" using 1:2 with lines ls 2 title "Forecast Trend", \
     $a*x+$b with lines ls 3 title "Trend Line"
EOF
    
    # Run gnuplot
    gnuplot "$gnuplot_script"
    
    # Clean up temporary files
    rm "$temp_data" "$trend_data" "$gnuplot_script"
    
    if [ -f "$forecast_file" ]; then
        # Generate a text report
        local forecast_report="${forecast_file%.png}_report.txt"
        
        echo "Backup Size Forecast Report" > "$forecast_report"
        echo "Generated: $(date)" >> "$forecast_report"
        echo "Forecast Days: $forecast_days" >> "$forecast_report"
        echo "Analysis based on $entry_count backup entries" >> "$forecast_report"
        echo "" >> "$forecast_report"
        
        # Calculate average growth per backup
        if (( $(echo "$a > 0" | bc -l) )); then
            echo "Trend: GROWING at approximately $(format_size $a) per backup" >> "$forecast_report"
        elif (( $(echo "$a < 0" | bc -l) )); then
            echo "Trend: SHRINKING at approximately $(format_size $(echo "$a * -1" | bc -l)) per backup" >> "$forecast_report"
        else
            echo "Trend: STABLE - no significant growth detected" >> "$forecast_report"
        fi
        
        # Generate some forecast points
        echo "" >> "$forecast_report"
        echo "Size Forecast:" >> "$forecast_report"
        
        local current_size=$(tail -1 "$temp_data" | awk '{print $2}')
        echo "Current backup size: $(format_size $current_size)" >> "$forecast_report"
        
        local next_backup=$(echo "$a * ($entry_count + 1) + $b" | bc -l)
        echo "Next backup (estimated): $(format_size $next_backup)" >> "$forecast_report"
        
        local week_forecast=$(echo "$a * ($entry_count + 7) + $b" | bc -l)
        echo "In 1 week (estimated): $(format_size $week_forecast)" >> "$forecast_report"
        
        local month_forecast=$(echo "$a * ($entry_count + 30) + $b" | bc -l)
        echo "In 1 month (estimated): $(format_size $month_forecast)" >> "$forecast_report"
        
        echo "" >> "$forecast_report"
        echo "Notes:" >> "$forecast_report"
        echo "- This forecast is based on historical trends and actual growth may vary" >> "$forecast_report"
        echo "- Storage requirements might increase if projects grow in size or new projects are added" >> "$forecast_report"
        echo "- Consider implementing a backup rotation policy if storage is constrained" >> "$forecast_report"
        
        echo "$forecast_file"
        return 0
    else
        echo "Failed to generate forecast"
        return 1
    fi
}

# Create visual dashboard HTML without relying on gnuplot
create_visual_dashboard() {
    local output_dir=$1
    local history_log=$2
    local dashboard_file="${output_dir}/backup_dashboard.html"
    
    # Create chart placeholder files if gnuplot is not available
    local history_chart="${output_dir}/backup_history_chart.png"
    local forecast_chart="${output_dir}/backup_forecast_chart.png"
    
    # Check if gnuplot is available
    if command -v gnuplot >/dev/null 2>&1; then
        # Generate charts using gnuplot
        generate_history_chart "$history_log" "$history_chart" 10
        generate_space_forecast "$history_log" "$forecast_chart" 30
    else
        # Create a simple 1x1 pixel transparent PNG
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > "$history_chart"

        # Copy the same placeholder for the forecast chart
        cp "$history_chart" "$forecast_chart"
    fi
    
    # Get recent backup stats
    local recent_backup=$(grep -A7 "BACKUP: SUCCESS" "$history_log" | head -7)
    local backup_date=$(echo "$recent_backup" | grep -o "[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}")
    local projects_count=$(echo "$recent_backup" | grep "Projects:" | grep -o "[0-9]* succeeded" | grep -o "[0-9]*")
    local backup_size=$(echo "$recent_backup" | grep "Total Size:" | grep -o "[0-9.]* [A-Z]*")
    
    # Create HTML dashboard
    cat > "$dashboard_file" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="refresh" content="300"> <!-- Refresh every 5 minutes -->
    <title>WebDev Backup Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
        }
        header {
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 5px 5px 0 0;
            text-align: center;
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-top: 20px;
        }
        .card {
            background: white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .card h2 {
            color: #2980b9;
            margin-top: 0;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        .stat-card {
            background: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
        }
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #2980b9;
            margin: 10px 0;
        }
        .stat-label {
            font-size: 14px;
            color: #7f8c8d;
        }
        .chart-container {
            width: 100%;
            margin-top: 20px;
        }
        .chart-container img {
            width: 100%;
            height: auto;
            border-radius: 5px;
        }
        footer {
            text-align: center;
            margin-top: 20px;
            color: #7f8c8d;
            font-size: 12px;
        }
        .last-update {
            text-align: right;
            margin-top: 10px;
            font-size: 12px;
            color: #7f8c8d;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>WebDev Backup Dashboard</h1>
            <p>Real-time monitoring and statistics</p>
        </header>
        
        <div class="dashboard-grid">
            <div class="card">
                <h2>Backup Status</h2>
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-label">Last Backup</div>
                        <div class="stat-value">$backup_date</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Projects</div>
                        <div class="stat-value">$projects_count</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Latest Size</div>
                        <div class="stat-value">$backup_size</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Status</div>
                        <div class="stat-value" style="color: #27ae60;">ACTIVE</div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Storage Forecast</h2>
                <div class="chart-container">
                    <img src="backup_forecast_chart.png" alt="Storage Forecast">
                    <div style="text-align: center; margin-top: 10px;">
                        <p><em>Note: Install gnuplot for detailed charts</em></p>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Backup History</h2>
                <div class="chart-container">
                    <img src="backup_history_chart.png" alt="Backup History">
                    <div style="text-align: center; margin-top: 10px;">
                        <p><em>Note: Install gnuplot for detailed charts</em></p>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Quick Actions</h2>
                <ul>
                    <li><a href="backup_dashboard.html">Refresh Dashboard</a></li>
                    <li><a href="#" onclick="alert('This feature will be implemented in a future version')">Force Backup Now</a></li>
                    <li><a href="#" onclick="alert('This feature will be implemented in a future version')">Restore Wizard</a></li>
                    <li><a href="#" onclick="alert('This feature will be implemented in a future version')">Configure Notifications</a></li>
                </ul>
            </div>
        </div>
        
        <div class="last-update">
            Last updated: $(date)
        </div>
        
        <footer>
            WebDev Backup Tool Dashboard - Generated Automatically
        </footer>
    </div>
</body>
</html>
EOF

    echo "$dashboard_file"
}

# End of reporting functions